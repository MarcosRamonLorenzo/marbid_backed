// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @unique
  email             String   @unique
  role              String   @default("USER")
  name              String   @default("")
  description       String   @default("")
  avatar_img        String   @default("https://c02.purpledshub.com/uploads/sites/48/2024/03/ngc-604-webb-hero.jpg?w=940&webp=1")
  backround_img     String   @default("https://picsum.photos/1920/1080.jpg")
  label             String   @default("")
  country           String   @default("")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdServices   Service[] @relation("createdServices")  
  aplicatedServices Service[] @relation("aplicatedServices")
  serviceRequests   ServiceRequest[]

  comments Comment[]
  likes    Like[]
}

model Service {
  id                String   @id @default(cuid()) 
  title             String
  price             String
  content           String   
  image             String
  status             Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  authorCreated     User     @relation(fields: [authorCreatedId], references: [id], name: "createdServices")
  authorCreatedId   String
  authorApplied     User?     @relation(fields: [authorAppliedId], references: [id], name: "aplicatedServices") 
  authorAppliedId   String?
  comments Comment[]
  likes    Like[]
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
  serviceRequests   ServiceRequest[]

}

model Comment {
  id        String   @id @default(cuid()) 
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id],onDelete: Cascade)
  authorId  String
  service   Service  @relation(fields: [serviceId], references: [id],onDelete: Cascade)
  serviceId String
}

model Like {

  createdAt DateTime @default(now())
  service   Service  @relation(fields: [serviceId], references: [id],onDelete: Cascade)
  serviceId String  
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    String  
  @@id([serviceId, userId])

}


model Category {
  id        String   @id @default(cuid()) 
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  services  Service[]
}


model ServiceRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  service   Service  @relation(fields: [serviceId], references: [id] ,onDelete: Cascade)
  serviceId String

  @@unique([userId, serviceId])
}
